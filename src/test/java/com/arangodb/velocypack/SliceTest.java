package com.arangodb.velocypack;

import java.math.BigInteger;
import java.util.Date;

import org.junit.Assert;
import org.junit.Test;

import com.arangodb.velocypack.exception.VPackValueTypeException;

/**
 * @author Mark - mark@arangodb.com
 *
 */
public class SliceTest {

	@Test
	public void isNone() {
		final byte[] vpack = { 0x00 };
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isNone());
	}

	@Test
	public void isNull() {
		final byte[] vpack = { 0x18 };
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isNull());
	}

	@Test
	public void isIllegal() {
		final byte[] vpack = { 0x17 };
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isIllegal());
	}

	@Test
	public void booleanTrue() {
		final byte[] vpack = { 0x1a };
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isBoolean());
		Assert.assertTrue(slice.isTrue());
		Assert.assertFalse(slice.isFalse());
	}

	@Test
	public void booleanFalse() {
		final byte[] vpack = { 0x19 };
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isBoolean());
		Assert.assertTrue(slice.isFalse());
		Assert.assertFalse(slice.isTrue());
	}

	@Test
	public void isArray() {
		checkArray(new byte[] { 0x01 });
		checkArray(new byte[] { 0x02 });
		checkArray(new byte[] { 0x03 });
		checkArray(new byte[] { 0x04 });
		checkArray(new byte[] { 0x05 });
		checkArray(new byte[] { 0x06 });
		checkArray(new byte[] { 0x07 });
		checkArray(new byte[] { 0x08 });
		checkArray(new byte[] { 0x09 });
		checkArray(new byte[] { 0x13 });
	}

	private void checkArray(final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isArray());
	}

	@Test
	public void isObject() {
		checkObject(new byte[] { 0x0b });
		checkObject(new byte[] { 0x0c });
		checkObject(new byte[] { 0x0d });
		checkObject(new byte[] { 0x0e });
		checkObject(new byte[] { 0x0f });
		checkObject(new byte[] { 0x10 });
		checkObject(new byte[] { 0x11 });
		checkObject(new byte[] { 0x12 });
		checkObject(new byte[] { 0x14 });
	}

	private void checkObject(final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isObject());
	}

	@Test
	public void isDouble() {
		final byte[] vpack = { 0x1b };
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isDouble());
		Assert.assertTrue(slice.isNumber());
	}

	@Test
	public void isUTCDate() {
		final byte[] vpack = { 0x1c };
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isUTCDate());
	}

	@Test
	public void isExternal() {
		final byte[] vpack = { 0x1d };
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isExternal());
	}

	@Test
	public void isMinKey() {
		final byte[] vpack = { 0x1e };
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isMinKey());
	}

	@Test
	public void isMaxKey() {
		final byte[] vpack = { 0x1f };
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isMaxKey());
	}

	@Test
	public void isInt() {
		checkInt(new byte[] { 0x20 });
		checkInt(new byte[] { 0x21 });
		checkInt(new byte[] { 0x22 });
		checkInt(new byte[] { 0x23 });
		checkInt(new byte[] { 0x24 });
		checkInt(new byte[] { 0x25 });
		checkInt(new byte[] { 0x26 });
		checkInt(new byte[] { 0x27 });
	}

	private void checkInt(final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isInt());
		Assert.assertTrue(slice.isInteger());
		Assert.assertTrue(slice.isNumber());
	}

	@Test
	public void isUInt() {
		checkUInt(new byte[] { 0x28 });
		checkUInt(new byte[] { 0x29 });
		checkUInt(new byte[] { 0x2a });
		checkUInt(new byte[] { 0x2b });
		checkUInt(new byte[] { 0x2c });
		checkUInt(new byte[] { 0x2d });
		checkUInt(new byte[] { 0x2e });
		checkUInt(new byte[] { 0x2f });
	}

	private void checkUInt(final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isUInt());
		Assert.assertTrue(slice.isInteger());
		Assert.assertTrue(slice.isNumber());
	}

	@Test
	public void isSmallInt() {
		checkSmallInt(new byte[] { 0x30 });
		checkSmallInt(new byte[] { 0x31 });
		checkSmallInt(new byte[] { 0x32 });
		checkSmallInt(new byte[] { 0x33 });
		checkSmallInt(new byte[] { 0x34 });
		checkSmallInt(new byte[] { 0x35 });
		checkSmallInt(new byte[] { 0x36 });
		checkSmallInt(new byte[] { 0x37 });
		checkSmallInt(new byte[] { 0x38 });
		checkSmallInt(new byte[] { 0x39 });
		checkSmallInt(new byte[] { 0x3a });
		checkSmallInt(new byte[] { 0x3b });
		checkSmallInt(new byte[] { 0x3c });
		checkSmallInt(new byte[] { 0x3d });
		checkSmallInt(new byte[] { 0x3e });
		checkSmallInt(new byte[] { 0x3f });
	}

	private void checkSmallInt(final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isSmallInt());
		Assert.assertTrue(slice.isInteger());
		Assert.assertTrue(slice.isNumber());
	}

	@Test
	public void isString() {
		checkString(new byte[] { 0x40 });
		checkString(new byte[] { 0x41 });
		checkString(new byte[] { 0x42 });
		checkString(new byte[] { 0x43 });
		checkString(new byte[] { 0x44 });
		checkString(new byte[] { 0x45 });
		checkString(new byte[] { 0x46 });
		checkString(new byte[] { 0x47 });
		checkString(new byte[] { 0x48 });
		checkString(new byte[] { 0x49 });
		checkString(new byte[] { 0x4a });
		checkString(new byte[] { 0x4b });
		checkString(new byte[] { 0x4c });
		checkString(new byte[] { 0x4d });
		checkString(new byte[] { 0x4e });
		checkString(new byte[] { 0x4f });
		checkString(new byte[] { 0x50 });
		checkString(new byte[] { 0x51 });
		checkString(new byte[] { 0x52 });
		checkString(new byte[] { 0x53 });
		checkString(new byte[] { 0x54 });
		checkString(new byte[] { 0x55 });
		checkString(new byte[] { 0x56 });
		checkString(new byte[] { 0x57 });
		checkString(new byte[] { 0x58 });
		checkString(new byte[] { 0x59 });
		checkString(new byte[] { 0x5a });
		checkString(new byte[] { 0x5b });
		checkString(new byte[] { 0x5c });
		checkString(new byte[] { 0x5d });
		checkString(new byte[] { 0x5e });
		checkString(new byte[] { 0x5f });
		checkString(new byte[] { 0x60 });
		checkString(new byte[] { 0x61 });
		checkString(new byte[] { 0x62 });
		checkString(new byte[] { 0x63 });
		checkString(new byte[] { 0x64 });
		checkString(new byte[] { 0x65 });
		checkString(new byte[] { 0x66 });
		checkString(new byte[] { 0x67 });
		checkString(new byte[] { 0x68 });
		checkString(new byte[] { 0x69 });
		checkString(new byte[] { 0x6a });
		checkString(new byte[] { 0x6b });
		checkString(new byte[] { 0x6c });
		checkString(new byte[] { 0x6d });
		checkString(new byte[] { 0x6e });
		checkString(new byte[] { 0x6f });
		checkString(new byte[] { 0x70 });
		checkString(new byte[] { 0x71 });
		checkString(new byte[] { 0x72 });
		checkString(new byte[] { 0x73 });
		checkString(new byte[] { 0x74 });
		checkString(new byte[] { 0x75 });
		checkString(new byte[] { 0x76 });
		checkString(new byte[] { 0x77 });
		checkString(new byte[] { 0x78 });
		checkString(new byte[] { 0x79 });
		checkString(new byte[] { 0x7a });
		checkString(new byte[] { 0x7b });
		checkString(new byte[] { 0x7c });
		checkString(new byte[] { 0x7d });
		checkString(new byte[] { 0x7e });
		checkString(new byte[] { 0x7f });
		checkString(new byte[] { (byte) 0x80 });
		checkString(new byte[] { (byte) 0x81 });
		checkString(new byte[] { (byte) 0x82 });
		checkString(new byte[] { (byte) 0x83 });
		checkString(new byte[] { (byte) 0x84 });
		checkString(new byte[] { (byte) 0x85 });
		checkString(new byte[] { (byte) 0x86 });
		checkString(new byte[] { (byte) 0x87 });
		checkString(new byte[] { (byte) 0x88 });
		checkString(new byte[] { (byte) 0x89 });
		checkString(new byte[] { (byte) 0x8a });
		checkString(new byte[] { (byte) 0x8b });
		checkString(new byte[] { (byte) 0x8c });
		checkString(new byte[] { (byte) 0x8d });
		checkString(new byte[] { (byte) 0x8e });
		checkString(new byte[] { (byte) 0x8f });
		checkString(new byte[] { (byte) 0x90 });
		checkString(new byte[] { (byte) 0x91 });
		checkString(new byte[] { (byte) 0x92 });
		checkString(new byte[] { (byte) 0x93 });
		checkString(new byte[] { (byte) 0x94 });
		checkString(new byte[] { (byte) 0x95 });
		checkString(new byte[] { (byte) 0x96 });
		checkString(new byte[] { (byte) 0x97 });
		checkString(new byte[] { (byte) 0x98 });
		checkString(new byte[] { (byte) 0x99 });
		checkString(new byte[] { (byte) 0x9a });
		checkString(new byte[] { (byte) 0x9b });
		checkString(new byte[] { (byte) 0x9c });
		checkString(new byte[] { (byte) 0x9d });
		checkString(new byte[] { (byte) 0x9e });
		checkString(new byte[] { (byte) 0x9f });
		checkString(new byte[] { (byte) 0xa0 });
		checkString(new byte[] { (byte) 0xa1 });
		checkString(new byte[] { (byte) 0xa2 });
		checkString(new byte[] { (byte) 0xa3 });
		checkString(new byte[] { (byte) 0xa4 });
		checkString(new byte[] { (byte) 0xa5 });
		checkString(new byte[] { (byte) 0xa6 });
		checkString(new byte[] { (byte) 0xa7 });
		checkString(new byte[] { (byte) 0xa8 });
		checkString(new byte[] { (byte) 0xa9 });
		checkString(new byte[] { (byte) 0xaa });
		checkString(new byte[] { (byte) 0xab });
		checkString(new byte[] { (byte) 0xac });
		checkString(new byte[] { (byte) 0xad });
		checkString(new byte[] { (byte) 0xae });
		checkString(new byte[] { (byte) 0xaf });
		checkString(new byte[] { (byte) 0xb0 });
		checkString(new byte[] { (byte) 0xb1 });
		checkString(new byte[] { (byte) 0xb2 });
		checkString(new byte[] { (byte) 0xb3 });
		checkString(new byte[] { (byte) 0xb4 });
		checkString(new byte[] { (byte) 0xb5 });
		checkString(new byte[] { (byte) 0xb6 });
		checkString(new byte[] { (byte) 0xb7 });
		checkString(new byte[] { (byte) 0xb8 });
		checkString(new byte[] { (byte) 0xb9 });
		checkString(new byte[] { (byte) 0xba });
		checkString(new byte[] { (byte) 0xbb });
		checkString(new byte[] { (byte) 0xbc });
		checkString(new byte[] { (byte) 0xbd });
		checkString(new byte[] { (byte) 0xbe });
		checkString(new byte[] { (byte) 0xbf });
	}

	private void checkString(final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isString());
	}

	@Test
	public void isBinary() {
		checkBinary(new byte[] { (byte) 0xc0 });
		checkBinary(new byte[] { (byte) 0xc1 });
		checkBinary(new byte[] { (byte) 0xc2 });
		checkBinary(new byte[] { (byte) 0xc3 });
		checkBinary(new byte[] { (byte) 0xc4 });
		checkBinary(new byte[] { (byte) 0xc5 });
		checkBinary(new byte[] { (byte) 0xc6 });
		checkBinary(new byte[] { (byte) 0xc7 });
	}

	private void checkBinary(final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isBinary());
	}

	@Test
	public void isBCD() {
		checkBCD(new byte[] { (byte) 0xc8 });
		checkBCD(new byte[] { (byte) 0xc9 });
		checkBCD(new byte[] { (byte) 0xca });
		checkBCD(new byte[] { (byte) 0xcb });
		checkBCD(new byte[] { (byte) 0xcc });
		checkBCD(new byte[] { (byte) 0xcd });
		checkBCD(new byte[] { (byte) 0xce });
		checkBCD(new byte[] { (byte) 0xcf });
		checkBCD(new byte[] { (byte) 0xd0 });
		checkBCD(new byte[] { (byte) 0xd1 });
		checkBCD(new byte[] { (byte) 0xd2 });
		checkBCD(new byte[] { (byte) 0xd3 });
		checkBCD(new byte[] { (byte) 0xd4 });
		checkBCD(new byte[] { (byte) 0xd5 });
		checkBCD(new byte[] { (byte) 0xd6 });
		checkBCD(new byte[] { (byte) 0xd7 });
	}

	private void checkBCD(final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isBCD());
	}

	@Test
	public void isCustom() {
		checkCustom(new byte[] { (byte) 0xf0 });
		checkCustom(new byte[] { (byte) 0xf1 });
		checkCustom(new byte[] { (byte) 0xf2 });
		checkCustom(new byte[] { (byte) 0xf3 });
		checkCustom(new byte[] { (byte) 0xf4 });
		checkCustom(new byte[] { (byte) 0xf5 });
		checkCustom(new byte[] { (byte) 0xf6 });
		checkCustom(new byte[] { (byte) 0xf7 });
		checkCustom(new byte[] { (byte) 0xf8 });
		checkCustom(new byte[] { (byte) 0xf9 });
		checkCustom(new byte[] { (byte) 0xfa });
		checkCustom(new byte[] { (byte) 0xfb });
		checkCustom(new byte[] { (byte) 0xfc });
		checkCustom(new byte[] { (byte) 0xfd });
		checkCustom(new byte[] { (byte) 0xfe });
		checkCustom(new byte[] { (byte) 0xff });
	}

	private void checkCustom(final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.isCustom());
	}

	@Test
	public void getBooleanTrue() {
		final byte[] vpack = { 0x1a };
		final Slice slice = new Slice(vpack);
		Assert.assertTrue(slice.getBoolean());
	}

	@Test
	public void getBooleanFalse() {
		final byte[] vpack = { 0x19 };
		final Slice slice = new Slice(vpack);
		Assert.assertFalse(slice.getBoolean());
	}

	@Test
	public void getDouble() {
		{
			final byte[] vpack = { 0x1b, 64, 96, -74, 102, 102, 102, 102, 102 };
			final Slice slice = new Slice(vpack);
			Assert.assertEquals(133.7, slice.getDouble(), 0.);
		}
		{
			final byte[] vpack = { 0x1b, -64, 96, -74, 102, 102, 102, 102, 102 };
			final Slice slice = new Slice(vpack);
			Assert.assertEquals(-133.7, slice.getDouble(), 0.);
		}
	}

	@Test
	public void getSmallInt() {
		checkSmallInt(0, new byte[] { 0x30 });
		checkSmallInt(1, new byte[] { 0x31 });
		checkSmallInt(2, new byte[] { 0x32 });
		checkSmallInt(3, new byte[] { 0x33 });
		checkSmallInt(4, new byte[] { 0x34 });
		checkSmallInt(5, new byte[] { 0x35 });
		checkSmallInt(6, new byte[] { 0x36 });
		checkSmallInt(7, new byte[] { 0x37 });
		checkSmallInt(8, new byte[] { 0x38 });
		checkSmallInt(9, new byte[] { 0x39 });
		checkSmallInt(-6, new byte[] { 0x3a });
		checkSmallInt(-5, new byte[] { 0x3b });
		checkSmallInt(-4, new byte[] { 0x3c });
		checkSmallInt(-3, new byte[] { 0x3d });
		checkSmallInt(-2, new byte[] { 0x3e });
		checkSmallInt(-1, new byte[] { 0x3f });
	}

	private void checkSmallInt(final int expecteds, final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertEquals(expecteds, slice.getSmallInt());
	}

	@Test
	public void getInt() {
		checkInt(Short.MAX_VALUE, new byte[] { 0x21, 127, -1 });
		checkInt(Integer.MAX_VALUE, new byte[] { 0x23, 127, -1, -1, -1 });
		checkInt(Long.MAX_VALUE, new byte[] { 0x27, 127, -1, -1, -1, -1, -1, -1, -1 });
	}

	private void checkInt(final long expextedValue, final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertEquals(expextedValue, slice.getInt());
	}

	@Test
	public void getUInt() {
		checkUInt(Short.MAX_VALUE, new byte[] { 0x29, 127, -1 });
		checkUInt(Integer.MAX_VALUE, new byte[] { 0x2b, 127, -1, -1, -1 });
		checkUInt(Long.MAX_VALUE, new byte[] { 0x2f, 127, -1, -1, -1, -1, -1, -1, -1 });
	}

	@Test
	public void getUIntAsBigInteger() {
		checkUIntAsBigInteger(new BigInteger(String.valueOf(Short.MAX_VALUE)), new byte[] { 0x29, 127, -1 });
		checkUIntAsBigInteger(new BigInteger(String.valueOf(Integer.MAX_VALUE)), new byte[] { 0x2b, 127, -1, -1, -1 });
		final BigInteger longMax = new BigInteger(String.valueOf(Long.MAX_VALUE));
		checkUIntAsBigInteger(longMax, new byte[] { 0x2f, 127, -1, -1, -1, -1, -1, -1, -1 });
		checkUIntAsBigInteger(longMax.add(longMax), new byte[] { 0x2f, -1, -1, -1, -1, -1, -1, -1, -2 });
	}

	private void checkUInt(final long expecteds, final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertEquals(expecteds, slice.getUInt());
	}

	private void checkUIntAsBigInteger(final BigInteger expecteds, final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertEquals(expecteds, slice.getUIntAsBigInteger());
	}

	@Test
	public void getUTCDate() {
		final byte[] vpack = { 0x1c, 0, 0, 0, -114, 5, 115, 83, 0 };
		final Slice slice = new Slice(vpack);
		Assert.assertEquals(new Date(609976800000l), slice.getUTCDate());
	}

	@Test
	public void getString() {
		checkString("Hallo Welt!", new byte[] { 0x4b, 72, 97, 108, 108, 111, 32, 87, 101, 108, 116, 33 });
		checkString("Hello World!", new byte[] { 0x4c, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33 });
		checkString(
			"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus.",
			new byte[] { (byte) 0xbf, 0x37, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x6f, 0x72, 0x65, 0x6d,
					0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74,
					0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74,
					0x75, 0x65, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65,
					0x6c, 0x69, 0x74, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x6d,
					0x6f, 0x64, 0x6f, 0x20, 0x6c, 0x69, 0x67, 0x75, 0x6c, 0x61, 0x20, 0x65, 0x67, 0x65, 0x74, 0x20,
					0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x6d, 0x61,
					0x73, 0x73, 0x61, 0x2e, 0x20, 0x43, 0x75, 0x6d, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x69, 0x73, 0x20,
					0x6e, 0x61, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x20, 0x70, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x62, 0x75,
					0x73, 0x20, 0x65, 0x74, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x20,
					0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x65,
					0x73, 0x2c, 0x20, 0x6e, 0x61, 0x73, 0x63, 0x65, 0x74, 0x75, 0x72, 0x20, 0x72, 0x69, 0x64, 0x69,
					0x63, 0x75, 0x6c, 0x75, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63,
					0x20, 0x71, 0x75, 0x61, 0x6d, 0x20, 0x66, 0x65, 0x6c, 0x69, 0x73, 0x2c, 0x20, 0x75, 0x6c, 0x74,
					0x72, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x6e, 0x65, 0x63, 0x2c, 0x20, 0x70, 0x65, 0x6c, 0x6c,
					0x65, 0x6e, 0x74, 0x65, 0x73, 0x71, 0x75, 0x65, 0x20, 0x65, 0x75, 0x2c, 0x20, 0x70, 0x72, 0x65,
					0x74, 0x69, 0x75, 0x6d, 0x20, 0x71, 0x75, 0x69, 0x73, 0x2c, 0x20, 0x73, 0x65, 0x6d, 0x2e, 0x20,
					0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x61, 0x74, 0x20,
					0x6d, 0x61, 0x73, 0x73, 0x61, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
					0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63, 0x20, 0x70, 0x65, 0x64, 0x65, 0x20, 0x6a, 0x75, 0x73, 0x74,
					0x6f, 0x2c, 0x20, 0x66, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6c, 0x6c, 0x61, 0x20, 0x76, 0x65, 0x6c,
					0x2c, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x74, 0x20, 0x6e, 0x65, 0x63, 0x2c, 0x20, 0x76,
					0x75, 0x6c, 0x70, 0x75, 0x74, 0x61, 0x74, 0x65, 0x20, 0x65, 0x67, 0x65, 0x74, 0x2c, 0x20, 0x61,
					0x72, 0x63, 0x75, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x65, 0x6e, 0x69, 0x6d, 0x20, 0x6a, 0x75, 0x73,
					0x74, 0x6f, 0x2c, 0x20, 0x72, 0x68, 0x6f, 0x6e, 0x63, 0x75, 0x73, 0x20, 0x75, 0x74, 0x2c, 0x20,
					0x69, 0x6d, 0x70, 0x65, 0x72, 0x64, 0x69, 0x65, 0x74, 0x20, 0x61, 0x2c, 0x20, 0x76, 0x65, 0x6e,
					0x65, 0x6e, 0x61, 0x74, 0x69, 0x73, 0x20, 0x76, 0x69, 0x74, 0x61, 0x65, 0x2c, 0x20, 0x6a, 0x75,
					0x73, 0x74, 0x6f, 0x2e, 0x20, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x6d, 0x20, 0x64, 0x69, 0x63, 0x74,
					0x75, 0x6d, 0x20, 0x66, 0x65, 0x6c, 0x69, 0x73, 0x20, 0x65, 0x75, 0x20, 0x70, 0x65, 0x64, 0x65,
					0x20, 0x6d, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x20, 0x70, 0x72, 0x65, 0x74, 0x69, 0x75, 0x6d, 0x2e,
					0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x75,
					0x6e, 0x74, 0x2e, 0x20, 0x43, 0x72, 0x61, 0x73, 0x20, 0x64, 0x61, 0x70, 0x69, 0x62, 0x75, 0x73,
					0x2e, 0x20, 0x56, 0x69, 0x76, 0x61, 0x6d, 0x75, 0x73, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
					0x74, 0x75, 0x6d, 0x20, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x20, 0x6e, 0x69, 0x73, 0x69, 0x2e,
					0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x76, 0x75, 0x6c, 0x70, 0x75, 0x74, 0x61, 0x74,
					0x65, 0x20, 0x65, 0x6c, 0x65, 0x69, 0x66, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x75,
					0x73, 0x2e });
	}

	private void checkString(final String expecteds, final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertEquals(expecteds, slice.getString());
	}

	@Test
	public void getStringLength() {
		checkStringLength(11, new byte[] { 0x4b, 72, 97, 108, 108, 111, 32, 87, 101, 108, 116, 33 });
		checkStringLength(12, new byte[] { 0x4c, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33 });
		checkStringLength(567, new byte[] { (byte) 0xbf, 0x37, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x6f,
				0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73,
				0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65,
				0x74, 0x75, 0x65, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65,
				0x6c, 0x69, 0x74, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
				0x64, 0x6f, 0x20, 0x6c, 0x69, 0x67, 0x75, 0x6c, 0x61, 0x20, 0x65, 0x67, 0x65, 0x74, 0x20, 0x64, 0x6f,
				0x6c, 0x6f, 0x72, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x6d, 0x61, 0x73, 0x73, 0x61,
				0x2e, 0x20, 0x43, 0x75, 0x6d, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x69, 0x73, 0x20, 0x6e, 0x61, 0x74, 0x6f,
				0x71, 0x75, 0x65, 0x20, 0x70, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x62, 0x75, 0x73, 0x20, 0x65, 0x74, 0x20,
				0x6d, 0x61, 0x67, 0x6e, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
				0x69, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x2c, 0x20, 0x6e, 0x61, 0x73, 0x63,
				0x65, 0x74, 0x75, 0x72, 0x20, 0x72, 0x69, 0x64, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x73, 0x20, 0x6d, 0x75,
				0x73, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63, 0x20, 0x71, 0x75, 0x61, 0x6d, 0x20, 0x66, 0x65, 0x6c,
				0x69, 0x73, 0x2c, 0x20, 0x75, 0x6c, 0x74, 0x72, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x6e, 0x65, 0x63,
				0x2c, 0x20, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x71, 0x75, 0x65, 0x20, 0x65, 0x75,
				0x2c, 0x20, 0x70, 0x72, 0x65, 0x74, 0x69, 0x75, 0x6d, 0x20, 0x71, 0x75, 0x69, 0x73, 0x2c, 0x20, 0x73,
				0x65, 0x6d, 0x2e, 0x20, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75,
				0x61, 0x74, 0x20, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x69,
				0x6d, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63, 0x20, 0x70, 0x65, 0x64, 0x65, 0x20, 0x6a, 0x75, 0x73,
				0x74, 0x6f, 0x2c, 0x20, 0x66, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6c, 0x6c, 0x61, 0x20, 0x76, 0x65, 0x6c,
				0x2c, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x74, 0x20, 0x6e, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x75,
				0x6c, 0x70, 0x75, 0x74, 0x61, 0x74, 0x65, 0x20, 0x65, 0x67, 0x65, 0x74, 0x2c, 0x20, 0x61, 0x72, 0x63,
				0x75, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x65, 0x6e, 0x69, 0x6d, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x6f, 0x2c,
				0x20, 0x72, 0x68, 0x6f, 0x6e, 0x63, 0x75, 0x73, 0x20, 0x75, 0x74, 0x2c, 0x20, 0x69, 0x6d, 0x70, 0x65,
				0x72, 0x64, 0x69, 0x65, 0x74, 0x20, 0x61, 0x2c, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x6e, 0x61, 0x74, 0x69,
				0x73, 0x20, 0x76, 0x69, 0x74, 0x61, 0x65, 0x2c, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x6f, 0x2e, 0x20, 0x4e,
				0x75, 0x6c, 0x6c, 0x61, 0x6d, 0x20, 0x64, 0x69, 0x63, 0x74, 0x75, 0x6d, 0x20, 0x66, 0x65, 0x6c, 0x69,
				0x73, 0x20, 0x65, 0x75, 0x20, 0x70, 0x65, 0x64, 0x65, 0x20, 0x6d, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x20,
				0x70, 0x72, 0x65, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20,
				0x74, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x75, 0x6e, 0x74, 0x2e, 0x20, 0x43, 0x72, 0x61, 0x73, 0x20, 0x64,
				0x61, 0x70, 0x69, 0x62, 0x75, 0x73, 0x2e, 0x20, 0x56, 0x69, 0x76, 0x61, 0x6d, 0x75, 0x73, 0x20, 0x65,
				0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x20, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x20, 0x6e,
				0x69, 0x73, 0x69, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x76, 0x75, 0x6c, 0x70, 0x75,
				0x74, 0x61, 0x74, 0x65, 0x20, 0x65, 0x6c, 0x65, 0x69, 0x66, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x6c,
				0x6c, 0x75, 0x73, 0x2e });
	}

	private void checkStringLength(final int expected, final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertEquals(expected, slice.getStringLength());
	}

	@Test
	public void getBinary() {
		final byte[] expected = new byte[] { 49, 50, 51, 52, 53, 54, 55, 56, 57 };
		checkBinary(expected, new byte[] { (byte) 0xc0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc1, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc2, 0, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc3, 0, 0, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc4, 0, 0, 0, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc5, 0, 0, 0, 0, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc6, 0, 0, 0, 0, 0, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc7, 0, 0, 0, 0, 0, 0, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
	}

	private void checkBinary(final byte[] expected, final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertArrayEquals(expected, slice.getBinary());
	}

	@Test
	public void getBinaryLength() {
		final int expected = 9;
		checkBinary(expected, new byte[] { (byte) 0xc0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc1, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc2, 0, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc3, 0, 0, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc4, 0, 0, 0, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc5, 0, 0, 0, 0, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc6, 0, 0, 0, 0, 0, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
		checkBinary(expected, new byte[] { (byte) 0xc7, 0, 0, 0, 0, 0, 0, 0, 9, 49, 50, 51, 52, 53, 54, 55, 56, 57 });
	}

	private void checkBinary(final int expected, final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertEquals(expected, slice.getBinaryLength());
	}

	@Test(expected = VPackValueTypeException.class)
	public void notArrayAt() {
		final Slice slice = new Slice(new byte[] { 0x1a });
		slice.at(1);
	}

	@Test
	public void arrayEmpty() {
		checkArray(new long[] {}, new byte[] { 0x01 });
	}

	@Test(expected = IndexOutOfBoundsException.class)
	public void arrayEmptyAt() {
		final Slice slice = new Slice(new byte[] { 0x01 });
		slice.at(1);
	}

	@Test
	public void arrayWithoutIndexTable() {
		final long[] expected = new long[] { 1, 2, 3 };
		checkArray(expected, new byte[] { 0x02, 0x05, 0x31, 0x32, 0x33 });
		checkArray(expected, new byte[] { 0x03, 0x06, 0x00, 0x31, 0x32, 0x33 });
		checkArray(expected, new byte[] { 0x04, 0x08, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33 });
		checkArray(expected, new byte[] { 0x05, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33 });
	}

	@Test
	public void arrayWithIndexTable() {
		final long[] expected = new long[] { 1, 2, 3 };
		checkArray(expected, new byte[] { 0x06, 0x09, 0x03, 0x31, 0x32, 0x33, 0x03, 0x04, 0x05 });
		checkArray(expected,
			new byte[] { 0x07, 0x0e, 0x00, 0x03, 0x00, 0x31, 0x32, 0x33, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00 });
		checkArray(expected, new byte[] { 0x08, 0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x09,
				0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00 });
	}

	@Test
	public void arrayWithIndexTable8bytes() {
		final long[] expected = new long[] { 1, 2, 3 };
		checkArray(expected,
			new byte[] { 0x09, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x09, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
	}

	@Test
	public void arrayCompact() {
		final long[] expected = { 1, 16 };
		checkArray(expected, new byte[] { 0x13, 0x06, 0x31, 0x28, 0x10, 0x02 });
	}

	@Test
	public void arrayIncludesArray() {
		final long[][] expected = { { 1, 2, 3 }, { 1, 2, 3 } };
		checkArray(expected, new byte[] { 0x02, 0x0c, 0x02, 0x05, 0x31, 0x32, 0x33, 0x02, 0x05, 0x31, 0x32, 0x33 });
	}

	@Test
	public void arrayIncludesArrayCompact() {
		final long[][] expected = { { 1, 2, 3 }, { 1, 2, 3 } };
		checkArray(expected,
			new byte[] { 0x02, 0x0e, 0x13, 0x06, 0x31, 0x32, 0x33, 0x03, 0x13, 0x06, 0x31, 0x32, 0x33, 0x03 });
	}

	@Test
	public void arrayIncludesObject() {
		// [{"a": 12, "b": true, "c": "xyz"},{"a": 12, "b": true, "c": "xyz"}]
		checkLength(2,
			new byte[] { 0x13, 0x23, 0x14, 0x10, 0x41, 0x61, 0x28, 0x0c, 0x41, 0x62, 0x1a, 0x41, 0x63, 0x43, 0x78, 0x79,
					0x7a, 0x03, 0x14, 0x10, 0x41, 0x61, 0x28, 0x0c, 0x41, 0x62, 0x1a, 0x41, 0x63, 0x43, 0x78, 0x79,
					0x7a, 0x03, 0x02 });
	}

	@Test
	public void arrayIncludesLongString() {
		checkLength(1, new byte[] { 0x03, 0x49, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xbf, 0x37, 0x02, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20,
				0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63,
				0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x65, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69,
				0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61,
				0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x6f, 0x20, 0x6c, 0x69, 0x67, 0x75, 0x6c, 0x61, 0x20,
				0x65, 0x67, 0x65, 0x74, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61,
				0x6e, 0x20, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x20, 0x43, 0x75, 0x6d, 0x20, 0x73, 0x6f, 0x63, 0x69,
				0x69, 0x73, 0x20, 0x6e, 0x61, 0x74, 0x6f, 0x71, 0x75, 0x65, 0x20, 0x70, 0x65, 0x6e, 0x61, 0x74, 0x69,
				0x62, 0x75, 0x73, 0x20, 0x65, 0x74, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73,
				0x20, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x65,
				0x73, 0x2c, 0x20, 0x6e, 0x61, 0x73, 0x63, 0x65, 0x74, 0x75, 0x72, 0x20, 0x72, 0x69, 0x64, 0x69, 0x63,
				0x75, 0x6c, 0x75, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63, 0x20, 0x71,
				0x75, 0x61, 0x6d, 0x20, 0x66, 0x65, 0x6c, 0x69, 0x73, 0x2c, 0x20, 0x75, 0x6c, 0x74, 0x72, 0x69, 0x63,
				0x69, 0x65, 0x73, 0x20, 0x6e, 0x65, 0x63, 0x2c, 0x20, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x65,
				0x73, 0x71, 0x75, 0x65, 0x20, 0x65, 0x75, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x74, 0x69, 0x75, 0x6d, 0x20,
				0x71, 0x75, 0x69, 0x73, 0x2c, 0x20, 0x73, 0x65, 0x6d, 0x2e, 0x20, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x20,
				0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x20, 0x71,
				0x75, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63, 0x20, 0x70,
				0x65, 0x64, 0x65, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x6f, 0x2c, 0x20, 0x66, 0x72, 0x69, 0x6e, 0x67, 0x69,
				0x6c, 0x6c, 0x61, 0x20, 0x76, 0x65, 0x6c, 0x2c, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x74, 0x20,
				0x6e, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x75, 0x6c, 0x70, 0x75, 0x74, 0x61, 0x74, 0x65, 0x20, 0x65, 0x67,
				0x65, 0x74, 0x2c, 0x20, 0x61, 0x72, 0x63, 0x75, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x65, 0x6e, 0x69, 0x6d,
				0x20, 0x6a, 0x75, 0x73, 0x74, 0x6f, 0x2c, 0x20, 0x72, 0x68, 0x6f, 0x6e, 0x63, 0x75, 0x73, 0x20, 0x75,
				0x74, 0x2c, 0x20, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x64, 0x69, 0x65, 0x74, 0x20, 0x61, 0x2c, 0x20, 0x76,
				0x65, 0x6e, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x73, 0x20, 0x76, 0x69, 0x74, 0x61, 0x65, 0x2c, 0x20, 0x6a,
				0x75, 0x73, 0x74, 0x6f, 0x2e, 0x20, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x6d, 0x20, 0x64, 0x69, 0x63, 0x74,
				0x75, 0x6d, 0x20, 0x66, 0x65, 0x6c, 0x69, 0x73, 0x20, 0x65, 0x75, 0x20, 0x70, 0x65, 0x64, 0x65, 0x20,
				0x6d, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x20, 0x70, 0x72, 0x65, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x20, 0x49,
				0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x75, 0x6e, 0x74, 0x2e,
				0x20, 0x43, 0x72, 0x61, 0x73, 0x20, 0x64, 0x61, 0x70, 0x69, 0x62, 0x75, 0x73, 0x2e, 0x20, 0x56, 0x69,
				0x76, 0x61, 0x6d, 0x75, 0x73, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x20, 0x73,
				0x65, 0x6d, 0x70, 0x65, 0x72, 0x20, 0x6e, 0x69, 0x73, 0x69, 0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61,
				0x6e, 0x20, 0x76, 0x75, 0x6c, 0x70, 0x75, 0x74, 0x61, 0x74, 0x65, 0x20, 0x65, 0x6c, 0x65, 0x69, 0x66,
				0x65, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x75, 0x73, 0x2e });
	}

	private void checkArray(final long[][] expected, final byte[] vpack) {
		checkLength(expected.length, vpack);
		final Slice slice = new Slice(vpack);
		for (int i = 0; i < expected.length; i++) {
			final long[] childArray = expected[i];
			final Slice at = slice.at(i);
			Assert.assertTrue(at.isArray());
			Assert.assertEquals(childArray.length, at.getLength());
			for (int j = 0; j < childArray.length; j++) {
				final Slice atat = at.at(j);
				Assert.assertTrue(atat.isInteger());
				Assert.assertEquals(childArray[j], atat.getInteger());
			}
		}
	}

	private void checkArray(final long[] expected, final byte[] vpack) {
		checkLength(expected.length, vpack);
		final Slice slice = new Slice(vpack);
		for (int i = 0; i < expected.length; i++) {
			final Slice at = slice.at(i);
			Assert.assertTrue(at.isInteger());
			Assert.assertEquals(expected[i], at.getInteger());
		}
	}

	@Test
	public void objectEmpty() {
		checkLength(0, new byte[] { 0x0a });
	}

	@Test
	public void objectLength() {
		// {"a": 12, "b": true, "c": "xyz"}
		final int expected = 3;
		checkLength(expected, new byte[] { 0x0b, 0x13, 0x03, 0x41, 0x62, 0x1a, 0x41, 0x61, 0x28, 0x0c, 0x41, 0x63, 0x43,
				0x78, 0x79, 0x7a, 0x06, 0x03, 0x0a });
		checkLength(expected,
			new byte[] { 0x0d, 0x22, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x41, 0x62, 0x03, 0x41, 0x61, 0x28, 0x0c,
					0x41, 0x63, 0x43, 0x78, 0x79, 0x7a, 0x0c, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x10, 0x00,
					0x00, 0x00 });
		checkLength(expected, new byte[] { 0x0f, 0x13, 0x03, 0x41, 0x62, 0x03, 0x41, 0x61, 0x28, 0x0c, 0x41, 0x63, 0x43,
				0x78, 0x79, 0x7a, 0x03, 0x06, 0x0a });
	}

	@Test
	public void objectCompactLength() {
		// {"a":1, "b":16}
		checkLength(2, new byte[] { 0x14, 0x0a, 0x41, 0x61, 0x31, 0x42, 0x62, 0x28, 0x10, 0x02 });
	}

	private void checkLength(final int expected, final byte[] vpack) {
		final Slice slice = new Slice(vpack);
		Assert.assertEquals(expected, slice.getLength());
	}

	@Test
	public void objectEmptyGet() {
		final Slice slice = new Slice(new byte[] { 0x0a });
		final Slice slice2 = slice.get("abc");
		Assert.assertTrue(slice2.isNone());
	}

	@Test
	public void objectSingleMemberString() {
		// {"a":"b"}
		final Slice slice = new Slice(new byte[] { 0x0b, 0x07, 0x01, 0x41, 0x61, 0x41, 0x62 });
		final Slice sliceNone = slice.get("abc");
		Assert.assertTrue(sliceNone.isNone());
		final Slice sliceA = slice.get("a");
		Assert.assertTrue(sliceA.isString());
	}
}
